import{_ as t,c as l,o as n,j as i,ae as e,a as p,t as h}from"./chunks/framework.CfDyAQj5.js";const k="/docs/assets/img/2024-8-15/20240815165009.png",o="/docs/assets/img/2024-8-15/20240815165226.png",d="/docs/assets/img/2024-8-15/20240815165436.png",r="/docs/assets/img/2024-8-15/20240815165913.png",c="/docs/assets/img/2024-8-15/20240815170504.png",g="/docs/assets/img/2024-8-15/20240815173027.png",u="/docs/assets/img/2024-8-15/20240815173128.png",m="/docs/assets/img/2024-8-15/20240815173305.png",F="/docs/assets/img/2024-8-15/20240815201600.png",y="/docs/assets/img/2024-8-15/20240815220858.png",b="/docs/assets/img/2024-8-15/20240815222722.png",E="/docs/assets/img/2024-8-16/20240816193135.png",v="/docs/assets/img/2024-8-16/20240816193505.png",C="/docs/assets/img/2024-8-16/20240816193724.png",z=JSON.parse('{"title":"项目规范化","description":"","frontmatter":{"title":"项目规范化","date":"2024-11-10","tags":"工程化,项目规范"},"headers":[],"relativePath":"article/normalization.md","filePath":"article/normalization.md"}'),B={name:"article/normalization.md"},f={id:"frontmatter-title",tabindex:"-1"};function _(a,s,q,x,j,D){return n(),l("div",null,[s[1]||(s[1]=i("p",null,"约束项目格式化、git commit message、框架相关最佳实践",-1)),i("h1",f,[p(h(a.$frontmatter.title)+" ",1),s[0]||(s[0]=i("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[2]||(s[2]=e('<h2 id="前置" tabindex="-1">前置 <a class="header-anchor" href="#前置" aria-label="Permalink to &quot;前置&quot;">​</a></h2><ul><li>编辑器 vscode</li><li>安装npm包 <ul><li><a href="https://github.com/typicode/husky" target="_blank" rel="noreferrer">husky</a></li><li><a href="https://github.com/lint-staged/lint-staged" target="_blank" rel="noreferrer">lint-staged</a></li><li><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a></li><li><a href="https://eslint.nodejs.cn/" target="_blank" rel="noreferrer">eslint</a>、(<a href="https://typescript-eslint.io/" target="_blank" rel="noreferrer">typescript-eslint</a> 可选下载)</li><li><a href="https://www.prettier.cn/" target="_blank" rel="noreferrer">prettier</a></li></ul></li><li>安装vscode插件 <ul><li>Prettier - Code formatter</li><li>ESLint</li><li>EditorConfig for VS Code</li><li>indent-rainbow</li></ul></li><li>git</li></ul><h2 id="项目支持prettier格式化" tabindex="-1">项目支持prettier格式化 <a class="header-anchor" href="#项目支持prettier格式化" aria-label="Permalink to &quot;项目支持prettier格式化&quot;">​</a></h2><p>在EditorConfig for VS Code插件的帮助下，右键创建一个默认.editorconfig文件 ,调整indent_size=2</p><ol><li><p>初始项目</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div></li><li><p>安装prettier</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-exact</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span></span></code></pre></div></li><li><p>调整vscode项目配置prettier本地路径</p><p><img src="'+k+'" alt=""></p></li><li><p>设置prettier成为项目默认格式化工具</p><p><img src="'+o+'" alt=""></p></li><li><p>格式化文件</p><p><strong>手动格式化</strong></p><p><img src="'+d+'" alt=""></p><p><strong>文件保存自动格式化</strong></p><p><img src="'+r+'" alt=""></p></li></ol><p><strong>eslint对代码质量有问题处标红</strong></p><p>默认情况下，vscode在你编辑代码时是无法识别一些错误的、如使用未定义的变量。</p><p><img src="'+c+`" alt=""></p><p><strong>配置以下，使得vscode能发现错误（标红）</strong></p><ol><li><p>安装ESLint vscode插件</p></li><li><p>安装eslint（v9版本）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @eslint/js</span></span></code></pre></div></li><li><p>项目根路径上创建eslint.config.mjs 文件、代码如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pluginJs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@eslint/js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [pluginJs.configs.recommended];</span></span></code></pre></div></li><li><p>配置vscode项目配置</p><p><img src="`+g+'" alt=""></p><p><img src="'+u+'" alt=""></p><p><img src="'+m+'" alt=""></p></li></ol><h2 id="使用husky让项目简单使用git-hooks" tabindex="-1">使用husky让项目简单使用git hooks <a class="header-anchor" href="#使用husky让项目简单使用git-hooks" aria-label="Permalink to &quot;使用husky让项目简单使用git hooks&quot;">​</a></h2><ol><li>安装</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span></span></code></pre></div><ol start="2"><li>初始</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><ol start="3"><li>执行后</li></ol><p><img src="'+F+`" alt=""></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>npm.scripts.prepare命令自动运行在npm install执行后、这样其他用户拉取项目 并安装依赖时会自动执行husky命令配置好husky相关。</p></div><h3 id="跳过git-hooks" tabindex="-1">跳过Git Hooks <a class="header-anchor" href="#跳过git-hooks" aria-label="Permalink to &quot;跳过Git Hooks&quot;">​</a></h3><ol><li>绝大部分git命令都有 -n/--no-verify 选项来跳过钩子、如</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Skips Git hooks</span></span></code></pre></div><ol start="2"><li>对于不支持-n选项的git命令，使用临时环境变量 HUSKY=0</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HUSKY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Temporarily disables all Git hooks</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Hooks will run again</span></span></code></pre></div><ol start="3"><li>对于多条命令时</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HUSKY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Disables all Git hooks</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HUSKY</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Re-enables hooks</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>其他的使用请<a href="https://typicode.github.io/husky/get-started.html" target="_blank" rel="noreferrer">查看文档</a></p></div><h2 id="规范git-commit" tabindex="-1">规范git commit <a class="header-anchor" href="#规范git-commit" aria-label="Permalink to &quot;规范git commit&quot;">​</a></h2><ol><li>安装 commitizen</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitizen</span></span></code></pre></div><ol start="2"><li>配置或执行commitizen命令</li></ol><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-KjASK" id="tab-D1ocUad" checked><label data-title="直接执行bash命令" for="tab-D1ocUad">直接执行bash命令</label><input type="radio" name="group-KjASK" id="tab-LhIrwcI"><label data-title="配置npm scripts" for="tab-LhIrwcI">配置npm scripts</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><ol start="3"><li><p>项目Commitizen friendly化</p><ol><li><p>安装cz-conventional-changelog</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz-conventional-changelog</span></span></code></pre></div></li><li><p>配置config.commitizen到package.json文件</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;commitizen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>此时使用npx cz或者（配置了commit script时）npm run commit会出现如下选择列表</p><p><img src="`+y+'" alt=""></p></li></ol></li></ol><div class="warning custom-block"><p class="custom-block-title">警告</p><p>此时，仍旧使用git commit命令的话，还是和没有安装commitizen时一样，因此还需要以下配置来约束</p></div><p><strong>做如下添加配置</strong></p><ol><li>在.husky目录下创建 prepare-commit-msg钩子文件</li><li>prepare-commit-msg文件中添加如下脚本</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/tty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&amp;0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_modules/.bin/cz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hook</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>不要按照git文档上使用 exec &lt;/dev/tty &amp;&amp; node_modules/.bin/cz --hook || true 有如下问题</p><ol><li>exec &lt; /dev/tty会有以下bug</li></ol><p><img src="'+b+`" alt=""></p><ol start="2"><li>node_modules/.bin/cz --hook || true 会使得用户直接CTRL+C取消输入，或者git commit -m &#39;提交信息&#39;的方式绕过。这样便达不到强制格式的效果。</li></ol></div><h2 id="lint即将提交的代码" tabindex="-1">lint即将提交的代码 <a class="header-anchor" href="#lint即将提交的代码" aria-label="Permalink to &quot;lint即将提交的代码&quot;">​</a></h2><p>虽然之前vscode安装并配置了eslint后有了对“问题”代码标红的能力，但是这些代码还是可以被提交到仓库的，因此需要堵上这个漏洞。</p><ol><li>安装lint-staged</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint-staged</span></span></code></pre></div><ol start="2"><li><p>配置 <a href="https://github.com/lint-staged/lint-staged" target="_blank" rel="noreferrer">参考</a></p><ul><li>创建.lintstagedrc.json文件</li><li>加上如下配置，对js文件先格式检查，再代码质量检查。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier -l&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>创建pre-commit钩子，并执行以下命令</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lint-staged</span></span></code></pre></div><p>效果截图如下：<br><em>初始</em>：</p><p><img src="`+E+'" alt=""></p><p><strong>git commit</strong>提交代码触发钩子进行检查</p><p><em>prettier</em>执行失败</p><p><img src="'+v+'" alt=""></p><p><em>eslint检查失败</em></p><p><img src="'+C+`" alt=""></p><p><strong>至此在git commit 提交代码时，会约束commit message以及会对项目提交的js文件进行样式、质量检查。</strong></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>typescript项目，jsx项目，vue项目还需要其他的eslint相关包来满足“特定的代码质量检查”，思路相同。</p></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><details class="details custom-block"><summary>规范相关配置</summary><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prettier</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitizen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz-conventional-changelog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint-staged</span></span></code></pre></div><ul><li><p>配置prettier path配置</p></li><li><p>搜索format，找到format on save并勾选</p></li><li><p>设置prettier为vscode默认格式化工具</p></li><li><p>执行npx husky</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><ul><li>package.json文件添加以下配置</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;commitizen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>创建在npx husky init命令下生成的.husky目录下创建prepare-commit-msg钩子文件，并输入以下命令</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_modules/.bin/cz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hook</span></span></code></pre></div><ul><li>创建.lintstagedrc.json文件，并输入以下</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier -l&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>.husky目录下创建pre-commit钩子文件，并输入以下命令</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lint-staged</span></span></code></pre></div></details><details class="details custom-block"><summary>eslint相关配置</summary><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @eslint/js</span></span></code></pre></div><p>创建eslint.config.mjs</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pluginJs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@eslint/js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [pluginJs.configs.recommended];</span></span></code></pre></div><ul><li>搜eslint，勾选开启eslint，并勾选Use Flat Config</li><li>如果没有发现vscode eslint生效，需要关闭并重启vscode</li></ul></details>`,55))])}const S=t(B,[["render",_]]);export{z as __pageData,S as default};
