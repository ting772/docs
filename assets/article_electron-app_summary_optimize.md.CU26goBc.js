import{_ as n,c as s,o as r,j as t,ae as o,a as i,t as p}from"./chunks/framework.YyOF0cHw.js";const c="/docs/assets/img/2025-3/20250310170328.png",d="/docs/assets/img/2025-3/20250310170427.png",l="/docs/assets/img/2025-3/20250310165531.png",m="/docs/assets/img/2025-3/20250310165921.png",w=JSON.parse('{"title":"electron app优化摘要","description":"","frontmatter":{"title":"electron app优化摘要","date":"2025-3-10","outline":[2,3],"tags":"electron"},"headers":[],"relativePath":"article/electron-app_summary_optimize.md","filePath":"article/electron-app_summary_optimize.md"}'),_={name:"article/electron-app_summary_optimize.md"},g={id:"frontmatter-title",tabindex:"-1"};function h(a,e,u,b,f,k){return r(),s("div",null,[t("h1",g,[i(p(a.$frontmatter.title)+" ",1),e[0]||(e[0]=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),e[1]||(e[1]=o('<p>开发electron app过程中遇到并实践的一些优化方案，在这里做一些整理，方便后续开发直接查阅。</p><h3 id="将web端依赖的包从package-json中的dependencies移动到devdependencies" tabindex="-1">将web端依赖的包从package.json中的dependencies移动到devDependencies <a class="header-anchor" href="#将web端依赖的包从package-json中的dependencies移动到devdependencies" aria-label="Permalink to &quot;将web端依赖的包从package.json中的dependencies移动到devDependencies&quot;">​</a></h3><p>如：web端通过<strong>npm install -S vue vue-router pinia</strong>等包，打包过后会包含在web资源输出文件中，而electron app打包时会把 dependencies里的包都保留在node_modules里并拷贝到打包结果中，这样造成了dependencies web端引用的包被2次放置。这里我们将web端引用资源 放到devDependencies可以做到包体积优化</p><p>如下图：</p><h4 id="挪前" tabindex="-1">挪前 <a class="header-anchor" href="#挪前" aria-label="Permalink to &quot;挪前&quot;">​</a></h4><p><img src="'+c+'" alt=""></p><p><img src="'+d+'" alt=""></p><h4 id="挪后" tabindex="-1">挪后 <a class="header-anchor" href="#挪后" aria-label="Permalink to &quot;挪后&quot;">​</a></h4><p><img src="'+l+'" alt=""></p><p><img src="'+m+'" alt=""></p>',10))])}const P=n(_,[["render",h]]);export{w as __pageData,P as default};
