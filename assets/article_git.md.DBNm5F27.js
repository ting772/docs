import{_ as e,c as l,o as r,j as i,ae as o,a as h,t as n}from"./chunks/framework.BGsNKwWY.js";const p=JSON.parse('{"title":"git常用命令","description":"","frontmatter":{"title":"git常用命令","date":"2024-11-10","outline":[2,3],"tags":"git"},"headers":[],"relativePath":"article/git.md","filePath":"article/git.md"}'),s={name:"article/git.md"},u={id:"frontmatter-title",tabindex:"-1"};function c(t,a,d,g,b,m){return r(),l("div",null,[i("h1",u,[h(n(t.$frontmatter.title)+" ",1),a[0]||(a[0]=i("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),a[1]||(a[1]=o('<h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><ul><li>git config core.ignorecase false (取消忽略文件名大小写)</li><li>git config pull.rebase true（调整git pull默认使用rebase方式合并，而不是使用git pull --rebase方式）</li></ul><h2 id="远程相关" tabindex="-1">远程相关 <a class="header-anchor" href="#远程相关" aria-label="Permalink to &quot;远程相关&quot;">​</a></h2><ul><li>git remote （查看远端仓库）</li><li>git remote -v （详细查看远端仓库及其地址）</li><li>git remote add 仓库名 仓库url （添加仓库）</li></ul><h2 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h2><h3 id="查看分支" tabindex="-1">查看分支 <a class="header-anchor" href="#查看分支" aria-label="Permalink to &quot;查看分支&quot;">​</a></h3><ul><li>git branch （查看本地分支）</li><li>git branch -a （查看远端追踪分支和本地分支）</li><li>git branch -vv (查看本地分支，及其关联的远端分支)</li></ul><h3 id="修改分支名" tabindex="-1">修改分支名 <a class="header-anchor" href="#修改分支名" aria-label="Permalink to &quot;修改分支名&quot;">​</a></h3><ul><li>git branch -m 新分支名（修改当前分支名为“新分支名”）</li><li>git branch -m 老分支名 新分支名</li></ul><h3 id="删除分支" tabindex="-1">删除分支 <a class="header-anchor" href="#删除分支" aria-label="Permalink to &quot;删除分支&quot;">​</a></h3><ul><li>git branch -d 分支名</li><li>git fetch -p （用于删除本地无用的远端追踪分支【远端分支删除，本地相关的跟踪分支残留】）</li><li>git push --delete origin 分支名 （删除远端分支）</li></ul><h3 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h3><ul><li>git checkout 已有分支名</li></ul><h3 id="移动分支到某个提交上" tabindex="-1">移动分支到某个提交上 <a class="header-anchor" href="#移动分支到某个提交上" aria-label="Permalink to &quot;移动分支到某个提交上&quot;">​</a></h3><ul><li><p>git checkout 分支<br> git reset --hard commit-hash</p></li><li><p>git branch -f feature commit-hash</p></li></ul><h3 id="创建分支并切换到该分支" tabindex="-1">创建分支并切换到该分支 <a class="header-anchor" href="#创建分支并切换到该分支" aria-label="Permalink to &quot;创建分支并切换到该分支&quot;">​</a></h3><ul><li>git checkout -b 新分支名 （从当前分支创建新分支，名称为“新分支名”）</li><li>git checkout -b 新分支名 origin/远端分支名 (新建分支并设置它的远端分支)</li><li>git checkout -t origin/远端分支名 （新建本地分支并自动推导名称）</li></ul><h3 id="关联远端分支" tabindex="-1">关联远端分支 <a class="header-anchor" href="#关联远端分支" aria-label="Permalink to &quot;关联远端分支&quot;">​</a></h3><ul><li>git branch -u origin/分支名 （绑定当前分支到远端分支）</li></ul><h2 id="打印" tabindex="-1">打印 <a class="header-anchor" href="#打印" aria-label="Permalink to &quot;打印&quot;">​</a></h2><ul><li>git log （基本打印）</li><li>git log --oneline (单行打印，短hash)</li><li>git log --pretty=oneline (单行打印，长hash)</li><li>git show commitId (查看提交修改的内容)</li><li>git show commitId --stat (查看提交被修改的文件有哪些)</li><li>git log --follow 文件路径 （查看改动该文件的提交的历史）</li></ul><h2 id="合并不同历史的分支" tabindex="-1">合并不同历史的分支 <a class="header-anchor" href="#合并不同历史的分支" aria-label="Permalink to &quot;合并不同历史的分支&quot;">​</a></h2><p>当本地仓库已经存在，新建远端仓库里有初始的相关提交时，常用的git pull会报出错误：<strong>fatal: refusing to merge unrelated histories</strong>。使用<strong>git pull --allow-unrelated-histories</strong>可以完成拉取合并。</p>',23))])}const q=e(s,[["render",c]]);export{p as __pageData,q as default};
